#include <iostream>
#include <iomanip>
using namespace std;

int main() {
    int n, m, z = 1;
    cin >> n >> m;
    // sozdanie i initializaciya massiva
    int arr[n][m];
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            arr[i][j] = z;
            z++;
        }
    }
    // obrabotka massiva
    for (int i = 0; i < n; i++) {
        if (i % 2) {
            for (int j = m - 1; j >= 0; j--) {
                cout << setw(4) << arr[i][j];
            }
        }
        else {
            for (int j = 0; j < m; j++) {
            cout << setw(4) << arr[i][j];
            }
        }
        cout << endl;
    }
  return 0;
}




/*
По данным числам n и m заполните двумерный массив размером n×m числами от 1 до n×m “змейкой”, как показано в примере.
Формат входных данных
Вводятся два числа n и m, каждое из которых не превышает 30.
Формат выходных данных

Выведите полученный массив, отводя на вывод каждого элемента ровно 4 символа.
*/




/*
Примечание: 
Обратите внимание, у проверяющей системы есть такой "каприз": когда она обнаруживает ошибку в выводимых данных, она нервничает и сдвигает первую строчку вывода влево. Если вы наблюдаете такое поведение системы - первым делом ищите ошибку у себя в выводимых данных! Причём это не обязательно должна быть ошибка в последовательности чисел, даже вывод дополнительного символа пробела сразу после вывода числа, тоже сбивает систему с толку,  например, 

cout << setw(4) << a[i][j] << " ";

будет считасться ошибкой!!!

Можно прекрасно обойтись без дополнительного пробела, ведь setw(4) и так обеспечивает 4 позиции под число!

 

Справка по команде setw (которая пригодится вам и в следующих задачах):

setw это один из так называемых манипуляторов вывода, обеспечивающих форматированный вывод. Он устанавливает кол-во позиций, выделяемых под следующее за ним выводимое значение. Таким образом setw(4) выделяет 4 позиции.
*/