					Области видимости переменных
Объекты в С++ имеют некоторую область видимости — часть программы, где к ним можно обратиться по имени. Переменные используются в области своей видимости.
Возьмём функцию ReadLine из кода поисковой системы. Переменная s объявлена в начале функции, поэтому может применяться во всей функции:

string ReadLine() {
    string s;
    getline(cin, s);
    return s;
} 

Поменяем местами первые две строки:

string ReadLine() {
    getline(cin, s);
    string s;
    return s;
} 

Эту функцию можем даже не вызывать — компилятор категорически откажется с этим работать:

test.cpp: In function ‘std::string ReadLine()’:
test.cpp:7:18: error: ‘s’ was not declared in this scope
    7 |     getline(cin, s); 

Фраза ‘s’ was not declared in this scope значит буквально «имя s в месте вызова getline не объявлено». Scope — это и есть та самая область видимости.
Общее правило видимости таково: переменная видна, начиная от своего объявления и заканчивая ближайшей закрывающей операторной скобкой. Эти скобки применяют и независимо — как раз чтобы ограничить область видимости.
В этом фрагменте реализации метода FindAllDocuments переменная inverse_document_freq не может быть использована в первом условном операторе, а также после цикла:

for (const string& word : query.plus_words) {
        // тут пока не видно
    if (word_to_document_freqs_.count(word) == 0) {
        continue;
    }
        // и тут всё ещё нет
    const double inverse_document_freq = ComputeWordInverseDocumentFreq(word);
        // а тут уже видно
    for (const auto [document_id, term_freq] : word_to_document_freqs_.at(word)) {
        const auto& document_data = documents_.at(document_id);
        if (document_predicate(document_id, document_data.status, document_data.rating)) {
            document_to_relevance[document_id] += term_freq * inverse_document_freq;
        }
    }
} 
// и снова не видно! 

Переменная word объявлена в заголовке цикла — и потому видна во всём цикле, но не снаружи. Аналогично область видимости параметров функции — это всё тело функции.
Компилятор не запретит нам объявить переменную с уже существующим именем во вложенной области видимости:

int ComputeAverageRating(const vector<int>& rating) {
    if (rating.empty()) {
        return 0;
    }
    int rating_sum = 0;
    for (const int rating : rating) {  // ого!
        rating_sum += rating;
    }
    return rating_sum / static_cast<int>(rating.size());
} 

Этот код будет отлично работать. Но горе тому программисту, который попробует разобраться, что такое rating внутри цикла. Особенно если размер цикла превысил десяток-другой строк.
Начинающие программисты часто не думают об областях видимости и объявляют все необходимые переменные как можно раньше. А зря: это может привести к ошибкам.
Рассмотрим код, который по вектору слов words строит вектор pure_words. Слова в этом векторе очищены от спецсимволов, таких как дефис, плюс и восклицательный знак:

#include <iostream>
#include <string>
#include <vector>
using namespace std;
int main() {
    const vector<string> words = {"!кот"s, "-пушистый"s};
    vector<string> pure_words;
    string pure_word;
    for (const string& word : words) {
        for (const char c : word) {
            if (c != '-' && c != '+' && c != '!') {  // если c не спецсимвол
                pure_word.push_back(c);
            }
        }
        pure_words.push_back(pure_word);
    }
    for (const string& word : pure_words) {
        cout << word << endl;
    }
} 

На выходе будет не то, что ожидалось:

кот
котпушистый 

Это частая ошибка излишне экономных программистов: автор не хотел создавать новую строчку pure_word на каждой итерации цикла, но, похоже, забыл её очистить после push_back. Если эту переменную сразу объявить максимально глубоко, проблемы не будет:

for (const string& word : words) {
    string pure_word;  // новая переменная для каждой итерации
    for (const char c : word) {
        if (c != '-' && c != '+' && c != '!') {  // если c не спецсимвол
            pure_word.push_back(c);
        }
    }
    pure_words.push_back(pure_word);
} 

Код работает, но его всё ещё можно улучшить. Над словом word совершается конкретное действие — очистка от спецсимволов. Вынесем его в функцию:

string PurifyWord(const string& word) {
    string pure_word;
    for (const char c : word) {
        if (c != '-' && c != '+' && c != '!') {  
            pure_word.push_back(c);
        }
    }
    return pure_word;
}
// ...
for (const string& word : words) {
    const string pure_word = PurifyWord(word);
    pure_words.push_back(pure_word);
} 

Мы объявили переменную pure_word константной и тем самым явно отметили: word преобразуется в pure_word функцией PurifyWord. Больше с этой переменной ничего не происходит.
Без отдельной переменной программа тоже будет работать:

for (const string& word : words) {
    pure_words.push_back(PurifyWord(word));
} 

Этот код короче и эффективнее. Мы не только грамотно выбрали область видимости для переменной pure_word, но и разделили две разные области:

    удаление спецсимволов переносом в функцию,
    добавление результата в вектор.

Всё это сделало код более понятным и легко тестируемым.