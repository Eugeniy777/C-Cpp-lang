Чтобы сложить дроби, человек сначала приводит их к общему знаменателю. Чтобы сравнить разные целочисленные типы или произвести над ними арифметические операции, компилятор приводит их к единому типу.

    Все типы, размер которых меньше int, компилятор приводит к int.
    Когда размер разных целочисленных типов равен int или превышает его, меньший тип преобразуется к большему.
    Если размер типов одинаковый, но один из них беззнаковый, — компилятор приводит знаковый к беззнаковому.

Это мы увидели на примере рейтингов, когда делили int на size_t. Если int и size_t имеют размер четыре байта, компилятор приводит оба типа данных к size_t, так как это беззнаковый тип. Если размер size_t — восемь байт, а int — четыре байта, size_t снова побеждает, потому что он больше.
Допустим, мы забыли правила преобразования типов. Компилятор напомнит — достаточно специально вызвать ошибку компиляции, связанную с этим типом. Например, прибавить к целому числу то, что прибавить невозможно. Из сообщения об ошибке компиляции поймём, как преобразование типов будет происходить в данном случае. 
Сравним знаковое и беззнаковое число:

int x = -1;
unsigned y = 1;
cout << (x < y) << endl; 

Сделаем код компактнее:

cout << (-1 < 1) << endl;  //сравниваем два числа напрямую 

Теперь всё сравнивается ожидаемо: как вы помните, по умолчанию числа имеют тип int. Чтобы воспроизвести предыдущий пример и сделать единицу беззнаковой, добавим суффикс u:

cout << (-1 < 1u) << endl; 

Суффикс u (или U) показывает, что литерал в коде относится к типу unsinged int. То есть: 

    тип литерала 1 — int;
    тип литерала 1u — unsigned int.

Запустим код и увидим warning — компилятор предупреждает, что мы сравниваем знаковое и беззнаковое числа. Предупреждение полезно. Но код всё равно скомпилируется, и переполнение мы не заметим. Этого можно избежать. В тренажёре предупреждения приравниваются к ошибкам, и опасный код не компилируется. Настройте свою IDE так же. Ниже — инструкция для Eclipse.

    Зайдите в Project ⇒ Properties.
    В Properties откройте С / С ++ Build ⇒ Settings.
    В открывшемся меню выберите Warnings.
    Поставьте галочку в пункт Warnings as errors (англ. «считать предупреждения ошибками»).
    Примените изменения и снова запустите компиляцию. Код не скомпилируется, потому что все предупреждения стали ошибками.
    Оставьте эту настройку, и опасный код не пройдёт.